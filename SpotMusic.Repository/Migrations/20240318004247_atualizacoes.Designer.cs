// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotMusic.Repository;

#nullable disable

namespace SpotMusic.Repository.Migrations
{
    [DbContext(typeof(SpotMusicContext))]
    [Migration("20240318004247_atualizacoes")]
    partial class atualizacoes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicaAutor", b =>
                {
                    b.Property<Guid>("MusicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MusicaId", "AutorId");

                    b.HasIndex("AutorId");

                    b.ToTable("MusicaAutor");
                });

            modelBuilder.Entity("MusicaPlaylist", b =>
                {
                    b.Property<Guid>("MusicasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MusicasId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("MusicaPlaylist");
                });

            modelBuilder.Entity("SpotMusic.Domain.Conta.Aggregates.Assinatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Assinatura", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Conta.Aggregates.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Notificacao.Aggregates.Notificacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinatarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RemetenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TipoNotificacao")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("RemetenteId");

                    b.ToTable("Notificacao", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Albuns");
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Autor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.EstiloMusical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EstiloMusical", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Interprete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MusicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MusicaId");

                    b.ToTable("Interprete", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Musica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EstiloMusicalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Letra")
                        .IsRequired()
                        .HasMaxLength(1080)
                        .HasColumnType("nvarchar(1080)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("EstiloMusicalId");

                    b.ToTable("Musica", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Plano", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Plano", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Publica")
                        .HasColumnType("bit");

                    b.Property<int>("TipoPlayList")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("SpotMusic.Domain.Transacao.Aggregates.Cartao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cartao", null, t =>
                        {
                            t.Property("Numero")
                                .HasColumnName("Cartao_Numero");
                        });
                });

            modelBuilder.Entity("SpotMusic.Domain.Transacao.Aggregates.Transacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CartaoId");

                    b.ToTable("Transacao", (string)null);
                });

            modelBuilder.Entity("MusicaAutor", b =>
                {
                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Autor", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Musica", null)
                        .WithMany()
                        .HasForeignKey("MusicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicaPlaylist", b =>
                {
                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Musica", null)
                        .WithMany()
                        .HasForeignKey("MusicasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpotMusic.Domain.Conta.Aggregates.Assinatura", b =>
                {
                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Plano", "Plano")
                        .WithMany()
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotMusic.Domain.Conta.Aggregates.Usuario", null)
                        .WithMany("Assinaturas")
                        .HasForeignKey("UsuarioId");

                    b.OwnsOne("SpotMusic.Domain.Streaming.ValueObject.Periodo", "Vigencia", b1 =>
                        {
                            b1.Property<Guid>("AssinaturaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("Fim")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodoFim");

                            b1.Property<DateTime>("Inicio")
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodoInicio");

                            b1.HasKey("AssinaturaId");

                            b1.ToTable("Assinatura");

                            b1.WithOwner()
                                .HasForeignKey("AssinaturaId");
                        });

                    b.Navigation("Plano");

                    b.Navigation("Vigencia")
                        .IsRequired();
                });

            modelBuilder.Entity("SpotMusic.Domain.Notificacao.Aggregates.Notificacao", b =>
                {
                    b.HasOne("SpotMusic.Domain.Conta.Aggregates.Usuario", "Destinatario")
                        .WithMany("Notificacoes")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotMusic.Domain.Conta.Aggregates.Usuario", "Remetente")
                        .WithMany()
                        .HasForeignKey("RemetenteId");

                    b.Navigation("Destinatario");

                    b.Navigation("Remetente");
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Interprete", b =>
                {
                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Musica", null)
                        .WithMany("Interpretes")
                        .HasForeignKey("MusicaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Musica", b =>
                {
                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.Album", null)
                        .WithMany("Musicas")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpotMusic.Domain.Streaming.Aggregates.EstiloMusical", "EstiloMusical")
                        .WithMany()
                        .HasForeignKey("EstiloMusicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SpotMusic.Domain.Streaming.ValueObject.Duracao", "Duracao", b1 =>
                        {
                            b1.Property<Guid>("MusicaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Valor")
                                .HasMaxLength(50)
                                .HasColumnType("int");

                            b1.HasKey("MusicaId");

                            b1.ToTable("Musica");

                            b1.WithOwner()
                                .HasForeignKey("MusicaId");
                        });

                    b.Navigation("Duracao")
                        .IsRequired();

                    b.Navigation("EstiloMusical");
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Plano", b =>
                {
                    b.OwnsOne("SpotMusic.Domain.Core.ValueObject.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("PlanoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PlanoId");

                            b1.ToTable("Plano");

                            b1.WithOwner()
                                .HasForeignKey("PlanoId");
                        });

                    b.OwnsOne("SpotMusic.Domain.Streaming.ValueObject.Periodo", "Vigencia", b1 =>
                        {
                            b1.Property<Guid>("PlanoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("Fim")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodoFim");

                            b1.Property<DateTime>("Inicio")
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodoInicio");

                            b1.HasKey("PlanoId");

                            b1.ToTable("Plano");

                            b1.WithOwner()
                                .HasForeignKey("PlanoId");
                        });

                    b.Navigation("Valor")
                        .IsRequired();

                    b.Navigation("Vigencia")
                        .IsRequired();
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Playlist", b =>
                {
                    b.HasOne("SpotMusic.Domain.Conta.Aggregates.Usuario", "Autor")
                        .WithMany("Playlists")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("SpotMusic.Domain.Transacao.Aggregates.Cartao", b =>
                {
                    b.HasOne("SpotMusic.Domain.Conta.Aggregates.Usuario", null)
                        .WithMany("Cartoes")
                        .HasForeignKey("UsuarioId");

                    b.OwnsOne("SpotMusic.Domain.Core.ValueObject.Monetario", "Limite", b1 =>
                        {
                            b1.Property<Guid>("CartaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Limite");

                            b1.HasKey("CartaoId");

                            b1.ToTable("Cartao");

                            b1.WithOwner()
                                .HasForeignKey("CartaoId");
                        });

                    b.OwnsOne("SpotMusic.Domain.Transacao.ValueObject.Endereco", "EnderecoCobranca", b1 =>
                        {
                            b1.Property<Guid>("CartaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Numero");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Rua");

                            b1.HasKey("CartaoId");

                            b1.ToTable("Cartao");

                            b1.WithOwner()
                                .HasForeignKey("CartaoId");
                        });

                    b.Navigation("EnderecoCobranca")
                        .IsRequired();

                    b.Navigation("Limite")
                        .IsRequired();
                });

            modelBuilder.Entity("SpotMusic.Domain.Transacao.Aggregates.Transacao", b =>
                {
                    b.HasOne("SpotMusic.Domain.Transacao.Aggregates.Cartao", null)
                        .WithMany("Transacoes")
                        .HasForeignKey("CartaoId");

                    b.OwnsOne("SpotMusic.Domain.Core.ValueObject.Monetario", "Valor", b1 =>
                        {
                            b1.Property<Guid>("TransacaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ValorTransacao");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacao");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.OwnsOne("SpotMusic.Domain.Transacao.ValueObject.Merchant", "Merchant", b1 =>
                        {
                            b1.Property<Guid>("TransacaoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MerchantNome");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacao");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.Navigation("Merchant")
                        .IsRequired();

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("SpotMusic.Domain.Conta.Aggregates.Usuario", b =>
                {
                    b.Navigation("Assinaturas");

                    b.Navigation("Cartoes");

                    b.Navigation("Notificacoes");

                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Album", b =>
                {
                    b.Navigation("Musicas");
                });

            modelBuilder.Entity("SpotMusic.Domain.Streaming.Aggregates.Musica", b =>
                {
                    b.Navigation("Interpretes");
                });

            modelBuilder.Entity("SpotMusic.Domain.Transacao.Aggregates.Cartao", b =>
                {
                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
